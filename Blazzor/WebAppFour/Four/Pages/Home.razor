@page "/"
@using System.ComponentModel.DataAnnotations
@using Four.Services
@implements IDisposable
@inject IJSRuntime JS
@inject MqttService MqttService


<PageTitle>Home</PageTitle>
<h3>Connexion MQTT</h3>

<EditForm Model="credentials" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Utilisateur</label>
        <InputText class="form-control" @bind-Value="credentials.UserName" />
    </div>
    <div class="mb-3">
        <label class="form-label">Mot de passe</label>
        <InputText type="password" class="form-control" @bind-Value="credentials.Password" />
    </div>
    <button class="btn btn-primary" disabled="@isConnecting">
        @if (isConnecting)
        {
            <span class="spinner-border spinner-border-sm"></span>
            @: Connexion...
        }
        else
        {
            @: Connecter
        }
    </button>



</EditForm>

@if (errorMessage is not null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}
@if (isConnected)
{
    <h1>Bienvenue, @credentials.UserName !</h1>
    <p style="color:green"><strong>MQTT connecté ✔️</strong></p>
    @* …ici tu pourras ajouter tes boutons Publish/Subscribe… *@
    <button class="btn btn-danger mt-3" @onclick="HandleDisconnect" disabled="@isConnecting">
        @if (isConnecting)
        {
            <span class="spinner-border spinner-border-sm"></span>
            @: Déconnexion...
        }
        else
        {
            @: Déconnecter
        }
    </button>
}


@code {
    private class Credentials
    {
        [Required] public string? UserName { get; set; }
        [Required] public string? Password { get; set; }
    }

    private Credentials credentials = new();
    private bool isConnecting;
    private bool isConnected;
    private string? errorMessage;
    private DotNetObjectReference<Home>? dotNetRef;

    protected override void OnInitialized()
    {
        
        dotNetRef = DotNetObjectReference.Create(this);
        MqttService.DotNetRef = dotNetRef;
        isConnected = MqttService.IsConnected;
    }

    private async Task HandleValidSubmit()
    {
        isConnecting = true;
        errorMessage = null;

        try
        {
            await JS.InvokeVoidAsync(
                 "connectMqtt",
                 "wss://4d1f194df18748a393eeabb274d5e439.s1.eu.hivemq.cloud:8884/mqtt",
                    credentials.UserName,
                   credentials.Password,
                    dotNetRef
                  );
            // on attend le callback JS pour NotifyMqttConnected ou NotifyMqttError
        }
        catch (JSException jsEx)
        {
            errorMessage = $"Erreur JS : {jsEx.Message}";
            isConnecting = false;
        }
    }

    [JSInvokable]
    public Task NotifyMqttConnected()
    {
        isConnecting = false;
        isConnected = true;
        MqttService.SetConnected(true);
        
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task NotifyMqttError(string message)
    {
        errorMessage = $"MQTT Erreur : {message}";
        isConnecting = false;
        isConnected = false;
        MqttService.SetConnected(false);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleDisconnect()
    {
        isConnecting = true;    // Pour afficher le spinner si besoin
        errorMessage = null;

        try
        {
            // Appelle la fonction JS qui déconnecte le client MQTT
            await JS.InvokeVoidAsync("disconnectMqtt");
            // La mise à jour réelle de isConnected se fera dans le callback NotifyMqttDisconnected
        }
        catch (JSException jsEx)
        {
            errorMessage = $"Erreur JS lors de la déconnexion : {jsEx.Message}";
            isConnecting = false;
        }
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }

 
}
