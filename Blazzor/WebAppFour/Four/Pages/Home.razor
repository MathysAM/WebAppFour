@page "/"
@using System.ComponentModel.DataAnnotations
@using Four.Services
@implements IDisposable
@inject IJSRuntime JS
@inject MqttService MqttService

<PageTitle>Home</PageTitle>

<article class="content px-4">
    <h3 class="mt-4">Connexion</h3>

    <EditForm Model="credentials" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Utilisateur</label>
            <InputText class="form-control" @bind-Value="credentials.UserName" />
        </div>

        <div class="mb-3">
            <label class="form-label">Mot de passe</label>
            <InputText type="password" class="form-control" @bind-Value="credentials.Password" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isWorking">
            @if (isWorking)
            {
                <span class="spinner-border spinner-border-sm"></span>
                @:&nbsp;Connexion...
            }
            else
            {
                @:Connexion
            }
        </button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    @if (MqttService.IsConnected)
    {
        <h1 class="mt-5">Bienvenue, @MqttService.Username !</h1>
        <button class="btn btn-danger mt-3"
                @onclick="HandleDisconnect"
                disabled="@isWorking">
            @if (isWorking)
            {
                <span class="spinner-border spinner-border-sm"></span>
                @:&nbsp;Déconnexion...
            }
            else
            {
                @:Déconnecter
            }
        </button>
    }
</article>

@code {
    private class Credentials
    {
        [Required] public string? UserName { get; set; }
        [Required] public string? Password { get; set; }
    }

    private Credentials credentials = new();
    private bool isWorking;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        MqttService.OnConnectionChanged += OnMqttStateChanged;
        MqttService.OnError += HandleError;
    }

    private void OnMqttStateChanged()
    {
        isWorking = false;
        StateHasChanged();
    }

    private void HandleError(string msg)
    {
        errorMessage = msg;
        isWorking = false;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        isWorking = true;
        errorMessage = null;
        await MqttService.ConnectAsync(
            "wss://4d1f194df18748a393eeabb274d5e439.s1.eu.hivemq.cloud:8884/mqtt",
            credentials.UserName!,
            credentials.Password!
        );
    }

    private async Task HandleDisconnect()
    {
        isWorking = true;
        errorMessage = null;
        await MqttService.DisconnectAsync();
    }

    public void Dispose()
    {
        MqttService.OnConnectionChanged -= OnMqttStateChanged;
        MqttService.OnError -= HandleError;
    }
} 