@page "/weather"
@inject IJSRuntime JS

<PageTitle>Programmation</PageTitle>

<h3 class="mb-4">Programmation journalière</h3>

@if (days?.Count == 7)
{
    @for (int i = 0; i < days.Count; i++)
    {
        var day = days[i];
           <!-- capture de la référence par valeur -->
        <div class="mb-4 border p-3 rounded">
            <label class="form-check-label">
                <input type="checkbox"
                       class="form-check-input me-2"
                       @bind="day.IsActive"
                       @bind:event="onchange" />
                @day.DayName
            </label>

            <div class="row mt-2">
                <div class="col">
                    <label>Heure de démarrage</label>
                    <select class="form-select" @bind="day.StartHour">
                        @for (int h = 0; h < 24; h++)
                        {
                            <option value="@h">@($"{h:D2}")</option>
                        }
                    </select>
                </div>
                <div class="col">
                    <label>Minute de démarrage</label>
                    <select class="form-select" @bind="day.StartMinute">
                        @for (int m = 0; m < 60; m += 5)
                        {
                            <option value="@m">@($"{m:D2}")</option>
                        }
                    </select>
                </div>
                <div class="col">
                    <label>Heure d'arrêt</label>
                    <select class="form-select" @bind="day.StopHour">
                        @for (int h = 0; h < 24; h++)
                        {
                            <option value="@h">@($"{h:D2}")</option>
                        }
                    </select>
                </div>
                <div class="col">
                    <label>Minute d'arrêt</label>
                    <select class="form-select" @bind="day.StopMinute">
                        @for (int m = 0; m < 60; m += 5)
                        {
                            <option value="@m">@($"{m:D2}")</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    }
}
else
{
    <p>Chargement de la programmation...</p>
}
else
{
    <p>Chargement de la programmation...</p>
}

@code {
    private class DaySchedule
    {
        public string DayName { get; set; } = string.Empty;
        public int Index { get; set; }

        private bool _isActive;
        public bool IsActive
        {
            get => _isActive;
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    try { OnActiveChanged?.Invoke(Index); }
                    catch (Exception ex) { Console.WriteLine($"[ActiveChanged] {ex.Message}"); }
                }
            }
        }

        private int _startHour, _stopHour, _startMinute, _stopMinute;

        public int StartHour
        {
            get => _startHour;
            set { if (_startHour != value) { _startHour = value; SafeTimeChanged(); } }
        }

        public int StopHour
        {
            get => _stopHour;
            set { if (_stopHour != value) { _stopHour = value; SafeTimeChanged(); } }
        }

        public int StartMinute
        {
            get => _startMinute;
            set { if (_startMinute != value) { _startMinute = value; SafeTimeChanged(); } }
        }

        public int StopMinute
        {
            get => _stopMinute;
            set { if (_stopMinute != value) { _stopMinute = value; SafeTimeChanged(); } }
        }

        public Action? OnTimeChanged { get; set; }
        public Action<int>? OnActiveChanged { get; set; }

        private void SafeTimeChanged()
        {
            try { OnTimeChanged?.Invoke(); }
            catch (Exception ex) { Console.WriteLine($"[TimeChanged] {ex.Message}"); }
        }
    }

    private readonly string[] dayNames = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"];
    private List<DaySchedule> days = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            days.Clear();
            for (int i = 0; i < 7; i++)
            {
                days.Add(CreateDaySchedule(i));

                var dotnetRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/Active", dotnetRef, "SetDayActive", i);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/StartHour", dotnetRef, "SetStartHour", i);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/StartMinute", dotnetRef, "SetStartMinute", i);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/StopHour", dotnetRef, "SetStopHour", i);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/StopMinute", dotnetRef, "SetStopMinute", i);
            }
        }
        catch (JSException ex)
        {
            Console.WriteLine($"[JS Error] {ex.Message}");
        }

        StateHasChanged();
    }

    private DaySchedule CreateDaySchedule(int index)
    {
        return new DaySchedule
            {
                Index = index,
                DayName = dayNames[index],
                OnTimeChanged = () => ValidateTime(index),
                OnActiveChanged = async (idx) => await PublishDayActive(idx)
            };
    }

    private async Task PublishDayActive(int index)
    {
        if (index < 0 || index >= days.Count)
            return;

        // Appel de la fonction JS existante 'publishMqttValue' au lieu de 'publishMqtt'
        await JS.InvokeVoidAsync(
            "publishMqttValue",
            $"/Prog/{index}/Active",
            days[index].IsActive.ToString().ToLower()
        );
    }

    private void ValidateTime(int index)
    {
        if (index < 0 || index >= days.Count) return;

        var day = days[index];
        int start = day.StartHour * 60 + day.StartMinute;
        int stop = day.StopHour * 60 + day.StopMinute;

        if (stop - start < 60)
        {
            if (stop < start)
            {
                day.StartHour = (day.StopHour + 23) % 24;
                day.StartMinute = day.StopMinute;
            }
            else
            {
                day.StopHour = (day.StartHour + 1) % 24;
                day.StopMinute = day.StartMinute;
            }
        }
    }

    [JSInvokable] public void SetDayActive(string value, int index) => UpdateIfValid(index, () => days[index].IsActive = value == "true");
    [JSInvokable] public void SetStartHour(string value, int index) => UpdateIfValid(index, () => days[index].StartHour = int.Parse(value));
    [JSInvokable] public void SetStartMinute(string value, int index) => UpdateIfValid(index, () => days[index].StartMinute = int.Parse(value));
    [JSInvokable] public void SetStopHour(string value, int index) => UpdateIfValid(index, () => days[index].StopHour = int.Parse(value));
    [JSInvokable] public void SetStopMinute(string value, int index) => UpdateIfValid(index, () => days[index].StopMinute = int.Parse(value));

    private void UpdateIfValid(int index, Action update)
    {
        if (index < 0 || index >= days.Count) return;
        update();
        StateHasChanged();
    }
}
