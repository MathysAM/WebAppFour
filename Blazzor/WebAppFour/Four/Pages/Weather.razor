@page "/weather"
@inject IJSRuntime JS

<PageTitle>Programmation</PageTitle>

<h3 class="mb-4">Programmation journalière</h3>

@if (days.Count < 7)
{
    <p>Chargement en cours...</p>
}
else
{
    @for (int i = 0; i < 7; i++)
    {
        <div class="mb-4 border p-3 rounded">
            <label class="form-check-label">
                <input type="checkbox"
                       class="form-check-input me-2"
                       @bind="days[i].IsActive"
                       @bind:event="onchange" />
                @days[i].DayName
            </label>

            <div class="row mt-2">
                <div class="col">
                    <label>Heure de démarrage</label>
                    <select class="form-select" @bind="days[i].StartHour">
                        @for (int h = 0; h < 24; h++)
                        {
                            <option value="@h">@($"{h:D2}")</option>
                        }
                    </select>
                </div>
                <div class="col">
                    <label>Minute de démarrage</label>
                    <select class="form-select" @bind="days[i].StartMinute">
                        @for (int m = 0; m < 60; m += 5)
                        {
                            <option value="@m">@($"{m:D2}")</option>
                        }
                    </select>
                </div>
                <div class="col">
                    <label>Heure d'arrêt</label>
                    <select class="form-select" @bind="days[i].StopHour">
                        @for (int h = 0; h < 24; h++)
                        {
                            <option value="@h">@($"{h:D2}")</option>
                        }
                    </select>
                </div>
                <div class="col">
                    <label>Minute d'arrêt</label>
                    <select class="form-select" @bind="days[i].StopMinute">
                        @for (int m = 0; m < 60; m += 5)
                        {
                            <option value="@m">@($"{m:D2}")</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    }
}

@code {
    private class DaySchedule
    {
        public string DayName { get; set; } = string.Empty;

        private bool _isActive;
        private int _startHour;
        private int _stopHour;

        public int Index { get; set; }

        public bool IsActive
        {
            get => _isActive;
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnActiveChanged?.Invoke(Index);
                }
            }
        }

        public int StartHour
        {
            get => _startHour;
            set
            {
                _startHour = value;
                OnTimeChanged?.Invoke();
            }
        }

        public int StopHour
        {
            get => _stopHour;
            set
            {
                _stopHour = value;
                OnTimeChanged?.Invoke();
            }
        }

        public int StartMinute { get; set; }
        public int StopMinute { get; set; }

        public Action? OnTimeChanged { get; set; }
        public Action<int>? OnActiveChanged { get; set; }
    }

    private readonly string[] dayNames = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"];
    private List<DaySchedule> days = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            for (int i = 0; i < 7; i++)
            {
                int indexCopy = i;
                var day = new DaySchedule
                    {
                        Index = i,
                        DayName = dayNames[i],
                        OnTimeChanged = () => ValidateTime(indexCopy),
                        OnActiveChanged = async (idx) => await PublishDayActive(idx)
                    };
                days.Add(day);

                var dotnetRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/Active", dotnetRef, "SetDayActive", i);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/StartHour", dotnetRef, "SetStartHour", i);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/StartMinute", dotnetRef, "SetStartMinute", i);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/StopHour", dotnetRef, "SetStopHour", i);
                await JS.InvokeVoidAsync("subscribeToMqtt", $"/Prog/{i}/StopMinute", dotnetRef, "SetStopMinute", i);
            }
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Erreur JS : {ex.Message}");
        }
    }

    private async Task PublishDayActive(int index)
    {
        await JS.InvokeVoidAsync("publishMqtt", $"/Prog/{index}/Active", days[index].IsActive.ToString().ToLower());
    }

    private void ValidateTime(int index)
    {
        if (index >= days.Count) return;

        var day = days[index];
        int start = day.StartHour * 60 + day.StartMinute;
        int stop = day.StopHour * 60 + day.StopMinute;

        if (stop - start < 60)
        {
            if (stop < start)
            {
                day.StartHour = (day.StopHour + 23) % 24;
                day.StartMinute = day.StopMinute;
            }
            else
            {
                day.StopHour = (day.StartHour + 1) % 24;
                day.StopMinute = day.StartMinute;
            }
        }
    }

    [JSInvokable] public void SetDayActive(string value, int index) => ApplyUpdate(() => days[index].IsActive = value == "true");
    [JSInvokable] public void SetStartHour(string value, int index) => ApplyUpdate(() => days[index].StartHour = int.Parse(value));
    [JSInvokable] public void SetStartMinute(string value, int index) => ApplyUpdate(() => days[index].StartMinute = int.Parse(value));
    [JSInvokable] public void SetStopHour(string value, int index) => ApplyUpdate(() => days[index].StopHour = int.Parse(value));
    [JSInvokable] public void SetStopMinute(string value, int index) => ApplyUpdate(() => days[index].StopMinute = int.Parse(value));

    private void ApplyUpdate(Action update)
    {
        if (days.Count < 7) return;
        update();
        StateHasChanged();
    }
}