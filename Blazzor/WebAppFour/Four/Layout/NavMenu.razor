@using Four.Services
@inject MqttService MqttService
@inject NavigationManager NavManager
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Pizza Thierry</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Connection
            </NavLink>
        </div>
        @if (MqttService.IsConnected)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="bi bi-plus-square-fill-nav-menu"></span> Start/Stop
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="weather">
                    <span class="bi bi-list-nested-nav-menu"></span> Weather
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

    protected override void OnInitialized()
    {
        // S'abonner pour être notifié des changements d'état
        MqttService.OnConnectionChanged += OnConnectionChanged;

       
    }

    private void OnConnectionChanged()
    {
        // Toujours passer par InvokeAsync pour
        // éviter les soucis de contexte Blazor
        InvokeAsync(() =>
        {
            if (!MqttService.IsConnected)
            {
                // Redirige immédiatement vers la page Connection
                NavManager.NavigateTo("", true);
            }
            else
            {
                // Si on retrouve la connexion, on peut
                // simplement rafraîchir l'UI pour ré-afficher les liens
                StateHasChanged();
            }
        });
    }

    public void Dispose()
    {
        // Penser à se désabonner pour éviter les fuites mémoire
        MqttService.OnConnectionChanged -= OnConnectionChanged;
    }
}
